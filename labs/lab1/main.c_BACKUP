#include <stdio.h>

void lineBreak(void) {
   printf("\n\n=============================================================\n\n");
}

unsigned char checkCarry(unsigned char a1, unsigned char a2) {
   if ((unsigned char)(a1 + a2) < a1)
      return 1;
   else
      return 0;
}

unsigned char checkOverflow(signed char a1, signed char a2) {
   if (((unsigned char)(a1 + a2) > 0x7F) || checkCarry(a1, a2))
      return 1;
   else
      return 0;
}

unsigned int arbitraryByteAdd(unsigned char *result, unsigned char *a1, unsigned char *a2, int size, unsigned int carry_in) {

}

int main(void) {
   int i;

   unsigned char
      bytestring[] = {0x41, 0x33, 0x54, 0x80, 0xFF, 0x99, 0x01, 0x78,
                      0x55, 0x20, 0xFE, 0xEE, 0x00, 0x00, 0x00, 0x00}, 
      bytestring_1[] = {0x01, 0x00, 0x00, 0x00, 0x44},
      bytestring_2[] = {0x00, 0x00, 0xFF, 0xFF, 0x30},
      bytestring_3[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
      bytestring_4[] = {0x01, 0x00, 0x00, 0x00, 0x00};
   unsigned short int *short_int;
   unsigned int *just_int;
   unsigned long int *long_int;

   lineBreak();

// Part 1 : Data Types and Sizes

   printf("The size of a byte is: %u\n",      sizeof(unsigned char));
   printf("The size of a short int is: %u\n", sizeof(short int));
   printf("The size of an int is: %u\n",      sizeof(int));
   printf("The size of a long int is: %u",    sizeof(long int));

   lineBreak();

   short_int = bytestring;
   just_int = bytestring;
   long_int = bytestring;

// Part 2 : Byte Ordering
   
   // No casting
   printf("\"bytestring\":\n");
   for (i = 0; i < 8; i++)
      printf("0x%X, ", bytestring[i]);
   printf("\n");
   for (; i < 16; i++)
      printf("0x%X, ", bytestring[i]);
   printf("\n\n"); 

   // Cast as "short int"
   printf("\"bytestring\" cast as short int:\n");
   for (i = 0; i < 8; i++)
      printf("0x%X, ", short_int[i]);
   printf("\n");
   for (; i < 16; i++)
      printf("0x%X, ", short_int[i]);
   printf("\n\n"); 

   // Cast as "int"
   printf("\"bytestring\" cast as int:\n");
   for (i = 0; i < 8; i++)
      printf("0x%X, ", just_int[i]);
   printf("\n");
   for (; i < 16; i++)
      printf("0x%X, ", just_int[i]);
   printf("\n\n"); 

   // Cast as "long int"
   printf("\"bytestring\" cast as long int:\n");
   for (i = 0; i < 8; i++)
      printf("0x%X, ", long_int[i]);
   printf("\n");
   for (; i < 16; i++)
      printf("0x%X, ", long_int[i]);

   lineBreak();
   
// Part 3 : Unsigned Addition of Small Fields

   printf("0x20 + 0x35 = 0x%X\n", (unsigned char)((unsigned char)0x20 + (unsigned char)0x35));
   printf("0x80 + 0x7F = 0x%X\n", (unsigned char)((unsigned char)0x80 + (unsigned char)0x7F));
   printf("0x80 + 0xFF = 0x%X\n", (unsigned char)((unsigned char)0x80 + (unsigned char)0xFF));
   printf("0xFF + 0x01 = 0x%X",   (unsigned char)((unsigned char)0xFF + (unsigned char)0x01));

   lineBreak();

// Part 4 : Detecting a Carry Condition

   printf("0x20 + 0x35 carry = %u\n", checkCarry(0x20, 0x35));
   printf("0x80 + 0x7F carry = %u\n", checkCarry(0x80, 0x7F));
   printf("0x80 + 0xFF carry = %u\n", checkCarry(0x80, 0xFF));
   printf("0xFF + 0x01 carry = %u",   checkCarry(0xFF, 0x01));

   lineBreak();

// Part 5 : Signed Addition and Overflow

   printf("0x20 + 0x35 = 0x%X overflow = %u\n", (signed char)0x20 + (signed char)0x35, checkOverflow(0x20, 0x35));
   printf("0x80 + 0x7F = 0x%X overflow = %u\n", (signed char)0x80 + (signed char)0x7F, checkOverflow(0x80, 0x7F));
   printf("0x80 + 0xFF = 0x%X overflow = %u\n", (signed char)0x80 + (signed char)0xFF, checkOverflow(0x80, 0xFF));
   printf("0xFF + 0x01 = 0x%X overflow = %u",   (signed char)0xFF + (signed char)0x01, checkOverflow(0xFF, 0x01));

   lineBreak(); 

// Part 6 : Extended Arithmetic

   

   return 0;
}
















